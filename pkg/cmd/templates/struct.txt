package {{.packageName}}
import (
	"time"
	"JoGo/boot"
	"errors"
    "fmt"
    "gorm.io/gorm"
)

//{{.structName}}TableName 表名常量,方便直接调用
const {{.structName}}TableName = "{{.tableName}}"

// {{.structName}} {{.tableComment}}
type {{.structName}} struct {
	//引入默认的struct,隔离IEntityStruct的方法改动
	{{range $i, $v := .columns}}
    //{{$v.field}} {{$v.COLUMN_COMMENT}}
    {{$v.field}} {{$v.DATA_TYPE}} `gorm:"column:{{$v.COLUMN_NAME}}"`
    {{end}}
	//------------------数据库字段结束,自定义字段写在下面---------------//
    //如果查询的字段在column tag中没有找到,就会根据名称(不区分大小写,支持 _ 转驼峰)映射到struct的属性上

}


//GetTableName 获取表名称
//IEntityStruct 接口的方法,实体类需要实现!!!
func (entity *{{.structName}}) TableName() string {
	return {{.structName}}TableName
}

//GetPKColumnName 获取数据库表的主键字段名称.因为要兼容Map,只能是数据库的字段名称
//不支持联合主键,变通认为无主键,业务控制实现(艰难取舍)
//如果没有主键,也需要实现这个方法, return "" 即可
//IEntityStruct 接口的方法,实体类需要实现!!!
func (entity *{{.structName}}) GetPKColumnName() string {
	//如果没有主键
	//return ""
	return "{{.pkName}}"
}


//type SearchResult struct {
//	Error  error
//	Status int
//}
//通过id找用户
func Find{{.structName}}ByID(id string) (*{{.structName}}, SearchResult) {
	var data {{.structName}}
	result := Result(boot.DB.Where("id = ?", id).First(&data).Error)
	return &data, result
}

//通过某一栏找用户
func Find{{.structName}}ByColum(colum string, value interface{}) (*{{.structName}}, bool) {
	var data {{.structName}}
	qs := fmt.Sprintf("%s = ?", colum)
	err := boot.DB.Where(qs, value).Find(&data).Error
	return &data, errors.Is(err, gorm.ErrRecordNotFound)
}




